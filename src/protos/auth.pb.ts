// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export enum ErrorCode {
  OK = 0,
  /** INVALID_CREDENTIALS - Authentication errors (010100 - 010199) */
  INVALID_CREDENTIALS = 100100,
  INVALID_TOKEN = 100101,
  TOKEN_EXPIRED = 100102,
  REFRESH_TOKEN_EXPIRED = 100103,
  TOKEN_NOT_FOUND = 100104,
  /** EMAIL_ALREADY_EXISTS - Registration errors (010200 - 010299) */
  EMAIL_ALREADY_EXISTS = 100200,
  INVALID_EMAIL_FORMAT = 100201,
  INVALID_PASSWORD_FORMAT = 100202,
  REGISTRATION_FAILED = 100203,
  /** EMAIL_NOT_VERIFIED - Verification errors (010300 - 010399) */
  EMAIL_NOT_VERIFIED = 100300,
  VERIFICATION_TOKEN_EXPIRED = 100301,
  VERIFICATION_TOKEN_INVALID = 100302,
  /** RESET_TOKEN_EXPIRED - Password reset errors (010400 - 010499) */
  RESET_TOKEN_EXPIRED = 100400,
  RESET_TOKEN_INVALID = 100401,
  PASSWORD_RESET_FAILED = 100402,
  UNRECOGNIZED = -1,
}

export interface Error {
  code: ErrorCode;
  message: string;
}

/** Register */
export interface RegisterRequest {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  gender: string;
}

export interface RegisterResponse {
  error: Error | undefined;
}

/** Login */
export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  error: Error | undefined;
  accessToken: string;
  refreshToken: string;
}

/** Refresh token */
export interface RefreshTokenRequest {
  refreshToken: string;
  userId: string;
}

export interface RefreshTokenResponse {
  error: Error | undefined;
  accessToken: string;
  refreshToken: string;
}

/** Send verification email */
export interface SendVerificationEmailRequest {
  email: string;
}

export interface SendVerificationEmailResponse {
  error: Error | undefined;
}

/** Forgot password */
export interface ForgotPasswordRequest {
  email: string;
}

export interface ForgotPasswordResponse {
  error: Error | undefined;
}

/** Reset password */
export interface ResetPasswordRequest {
  token: string;
  password: string;
}

export interface ResetPasswordResponse {
  error: Error | undefined;
}

/** Validate */
export interface ValidateRequest {
  token: string;
}

export interface ValidateResponse {
  error: Error | undefined;
  userId: string;
  role: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  register(request: RegisterRequest): Observable<RegisterResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  validate(request: ValidateRequest): Observable<ValidateResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  sendVerificationEmail(request: SendVerificationEmailRequest): Observable<SendVerificationEmailResponse>;

  forgotPassword(request: ForgotPasswordRequest): Observable<ForgotPasswordResponse>;

  resetPassword(request: ResetPasswordRequest): Observable<ResetPasswordResponse>;
}

export interface AuthServiceController {
  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  validate(request: ValidateRequest): Promise<ValidateResponse> | Observable<ValidateResponse> | ValidateResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  sendVerificationEmail(
    request: SendVerificationEmailRequest,
  ): Promise<SendVerificationEmailResponse> | Observable<SendVerificationEmailResponse> | SendVerificationEmailResponse;

  forgotPassword(
    request: ForgotPasswordRequest,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

  resetPassword(
    request: ResetPasswordRequest,
  ): Promise<ResetPasswordResponse> | Observable<ResetPasswordResponse> | ResetPasswordResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "login",
      "validate",
      "refreshToken",
      "sendVerificationEmail",
      "forgotPassword",
      "resetPassword",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
